from ast import Call
import asyncio
import logging
import sys
from os import getenv
from time import process_time_ns

from aiogram import Bot, Dispatcher, Router, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode
from aiogram import F
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
)
from aiogram.utils.markdown import hbold

from app.config import config
from app import crud
from app.core.sql import Sql
from app.models.telegram import TelegramLoginData
from asgiref.sync import async_to_sync
from enum import Enum


dp = Dispatcher()
bot = Bot(config.telegram_bot_token, parse_mode=ParseMode.HTML)
sql = Sql(
    pg_user=config.postgres_user,
    pg_password=config.postgres_password,
    pg_host=config.postgres_host,
    pg_db=config.postgres_db,
    pg_port=config.postgres_port,
)


def get_link(token: str) -> str:
    return f"https://t.me/{config.telegram_bot_name}?start={token}"


class NotificationType(Enum):
    task_new = "task_new"
    task_done = "task_done"
    task_deadline = "task_deadline"


class FeedbackRequest(Enum):
    first = "first"
    week = "week"
    month = "month"


class Messages:
    @staticmethod
    def task_new(fullname: str, task_name: str):
        return f"""
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {fullname},

–í–∞–º –ø–æ—Ä—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {task_name}. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å —Å –Ω–µ–π –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω—ã–º –∞—Å–ø–µ–∫—Ç–æ–º —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∑–∞ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è–º–∏.

–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–í–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å.
"""

    @staticmethod
    def task_deadline(fullname: str, task_name: str):
        return f"""
{fullname}! –í–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ!

–î–µ–¥–ª–∞–π–Ω –ø–æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ "{task_name}" –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë –≤–æ–≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∏ —É–ª—É—á—à–∏—Ç—å –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é!

–ú—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –≤–∞—à–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∂–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤!
"""

    @staticmethod
    def task_done(
        mentor_fullname: str,
        mentee_fullname: str,
        task_name: str,
    ):
        return f""" 
–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {mentor_fullname},

–•–æ—Ç–∏–º —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º, —á—Ç–æ {mentee_fullname} –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è(–ª–∞—Å—å) —Å –∑–∞–¥–∞–Ω–∏–µ–º {task_name}. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –µ–≥–æ(–µ—ë) —Ä–∞–±–æ—Ç—ã, –¥–∞—Ç—å —Ü–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –≤—ã–¥–µ–ª–∏—Ç—å —É–¥–∞—á–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –∞—Å–ø–µ–∫—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è.

–° –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é,
–í–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å.
"""

    @staticmethod
    def feedback_first_day(fullname: str):
        return f"""–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {fullname},
üåü –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å ‚Äì —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ! –ö–∞–∫ –æ—â—É—â–µ–Ω–∏—è? –ù—É–∂–Ω–∞ –ª–∏ —Ç–µ–±–µ –ø–æ–º–æ—â—å –∏–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ?

–ñ–¥—É —Ç–≤–æ–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —á–µ–º —É–≥–æ–¥–Ω–æ!
"""

    @staticmethod
    def feedback_first_week(fullname: str):
        return f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {fullname},

üöÄ –£–∂–µ –Ω–µ–¥–µ–ª—è —Ä–∞–±–æ—Ç—ã –∑–∞ –ø–ª–µ—á–∞–º–∏! –ö–∞–∫ —Ç–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è? –ú–æ–∂–µ—Ç, –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?

–¢–≤–æ—ë –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –î–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å –≤–º–µ—Å—Ç–µ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤!

"""

    @staticmethod
    def feedback_first_month(fullname: str):
        return f"""
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, {fullname},

üåü –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –≤ –∫–æ–º–∞–Ω–¥–µ ‚Äì —ç—Ç–æ –±–æ–ª—å—à–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –ö–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –±—ã–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º–∏—Å—è? –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª(–∞) –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å?

–¢–≤–æ–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º —Ä–∞—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è. –ñ–¥—É —Ç–≤–æ–∏—Ö –∏–¥–µ–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!


–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ë–æ—Ä–∏—Å, —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.
"""


class FeedbackCallbackData(CallbackData, prefix="adm"):
    type: FeedbackRequest
    user_id: int


async def notify(tg_id: int, notification: NotificationType, data: dict):
    message = ""
    match notification:
        case NotificationType.task_done:
            message = Messages.task_done(
                data["mentor_fullname"],
                data["mentee_fullname"],
                data["task_name"],
            )
        case NotificationType.task_deadline:
            message = Messages.task_deadline(data["fullname"], data["task_name"])
        case NotificationType.task_new:
            message = Messages.task_new(data["fullname"], data["task_name"])
    await bot.send_message(tg_id, message)


async def request_feedback(tg_id: int, fullname: str, feedback: FeedbackRequest):

    message = ""
    match feedback:
        case FeedbackRequest.first:
            message = Messages.feedback_first_day(fullname)
        case FeedbackRequest.week:
            message = Messages.feedback_first_week(fullname)
        case FeedbackRequest.month:
            message = Messages.feedback_first_month(fullname)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å",
                    callback_data=FeedbackCallbackData(
                        type=feedback, user_id=tg_id
                    ).pack(),
                )
            ]
        ]
    )
    await bot.send_message(
        tg_id,
        message,
        reply_markup=keyboard,
    )


@dp.message(CommandStart())
async def command_start_handler(message: Message, command: CommandStart) -> None:
    """
    This handler receives messages with `/start` command
    """
    args = command.args
    print(type(args))
    if args:
        with next(sql.get_session()) as db:
            user_id = int(args)
            db_user = await crud.user.get_user_by_id(db, user_id)
            print(message.from_user)
            await crud.telegram.add_account(
                db,
                TelegramLoginData.model_validate(message.from_user.model_dump()),
                db_user.id,
            )
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {hbold(db_user.first_name)} {hbold(db_user.last_name)}!"
            )
    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


class Survey(StatesGroup):
    rating = State()
    feeling = State()
    info = State()


class SurveyResult(CallbackData, prefix="survey_"):
    rating: int = 0
    feeling: int = 0
    info: str = ""


rating_options_sentence = {
    "–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–º –∏ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º.": 1,
    "–ë—ã–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –Ω–æ –≤ —Ü–µ–ª–æ–º –ø—Ä–æ—Ü–µ—Å—Å —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π.": 2,
    "–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω –Ω–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π.": 3,
    "–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω –Ω–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π.": 4,
    "–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º, –Ω–æ –∏–º–µ—é—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–µ–¥–æ—á—ë—Ç—ã.": 5,
}

rating_options = {
    "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ": 1,
    "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ": 2,
    "–•–æ—Ä–æ—à–æ": 3,
    "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ": 4,
    "–û—Ç–ª–∏—á–Ω–æ": 5,
}

feeling_options = {
    "–í–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω—ã–π": 5,
    "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–π": 4,
    "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π": 3,
    "–°–º—É—â–µ–Ω–Ω—ã–π": 2,
    "–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π": 1,
}


@dp.callback_query(FeedbackCallbackData.filter(F.type == FeedbackRequest.first))
async def process_first_day(
    query: CallbackQuery, callback_data: FeedbackCallbackData, state: FSMContext
):
    _keyboard = [[KeyboardButton(text=k)] for k, _ in rating_options.items()]
    await state.set_state(Survey.rating)
    await bot.send_message(
        query.from_user.id,
        "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?",
        reply_markup=ReplyKeyboardMarkup(keyboard=_keyboard),
    )


@dp.message(Survey.rating)
async def process_rating(message: Message, state: FSMContext) -> None:
    if message.text not in rating_options.keys():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    else:
        _keyboard = [[KeyboardButton(text=k)] for k, _ in feeling_options.items()]
        await state.set_data(data={"rating": rating_options[message.text]})
        await state.set_state(Survey.feeling)
        await message.reply(
            text="–ö–∞–∫–æ–≤–æ –≤–∞—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=_keyboard,
            ),
        )


@dp.message(Survey.feeling)
async def process_feeling(message: Message, state: FSMContext) -> None:
    if message.text not in feeling_options.keys():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    else:
        data = await state.get_data()
        data["feeling"] = feeling_options[message.text]
        await state.set_data(data)
        await state.set_state(Survey.info)
        await bot.send_message(
            message.from_user.id,
            "–ë—ã–ª–∞ –ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏?",
            reply_markup=ReplyKeyboardRemove(),
        )


@dp.message(Survey.info)
async def process_feeling(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    data["info"] = message.text
    print(data)
    await message.reply(
        text="""
üéâ –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –¢–≤–æ—ë –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å, –∏ –æ–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–ª–∞—Ç—å –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é –µ—â–µ –ª—É—á—à–µ!

–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º —Ç–≤–æ–∏ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –∑–∞ –ø–æ–º–æ—â—å—é –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

–ñ–µ–ª–∞—é —Ç–µ–±–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–Ω—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ!"""
    )


@dp.message()
async def echo_handler(message: types.Message) -> None:
    """
    Handler will forward receive a message back to the sender

    By default, message handler will handle all message types (like a text, photo, sticker etc.)
    """
    try:
        # Send a copy of the received message
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        # But not all the types is supported to be copied so need to handle it
        await message.answer("Nice try!")


async def main() -> None:
    await request_feedback(499114263, "–ú–∞–∫—Å–∏–º –õ–µ–¥–∞–∫–æ–≤", FeedbackRequest.first)
    await dp.start_polling(bot)
